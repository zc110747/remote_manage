################################################################################
# This file is used to define global command, no need update the file unless 
# want to extend the global command.
#
################################################################################

echo "Update the Alias Command..."

#-------------------------------------------------------------------------------
# This section defines the alias of the command.
# The command abbreviation for use.
#-------------------------------------------------------------------------------
alias ll="ls -alF"
alias pe="printenv"
alias se="saveenv"

alias cda="cd ${ENV_PATH_ROOT}"
alias cdb="cd ${ENV_PATH_ROOT/buildout}"
alias cdd="cd ${PROGRAM_DOWNLOAD}"
alias cde="cd ${ENV_PATH_ROOT/embed}"
alias cdk="cd ${ENV_KERNEL_DIR}"
alias cdn="cd ${NFS_PATH}"
alias cdr="cd ${ENV_ROOTFS_DIR}"
alias cdu="cd ${ENV_BOOT_DIR}"
alias cdi="cd ${GLOBAL_INTALL}"

#-------------------------------------------------------------------------------
# This section defines the function for program management.
# The Extend Command for program compiler, package, push.
#-------------------------------------------------------------------------------
exit_if_last_error() {
    if [[ $? -ne 0 ]]; then
		read -p "shell faild, wheather exit?(y/n, default is y)" exit_val

		if [ -z ${exit_val} ] || [ ${exit_val} == 'y' ]; then
        	exit 1
		fi
    fi
}
alias exit_if_last_error='exit_if_last_error'

#tar the firmware source
function SysTarFirmwareSource
{
	cd ${ENV_PATH_ROOT}/../

	tar --exclude='remote_manage/.git' --exclude='remote_manage/rootfs/run/support' --exclude='remote_manage/thirdparts' -vcjf remote_manage.tar.bz2 remote_manage/

	exit_if_last_error

	echo "move to ${DST_PATH}"
	mv remote_manage.tar.bz2 ${DST_PATH}/
}	
alias SysTarFirmwareSource='SysTarFirmwareSource'

function SysPullAll()
{
	echo "------start pull thirdparts libary------"

	cd $ENV_PATH_ROOT/thirdparts

	./pull_all.sh
}
alias SysPullAll='SysPullAll'

# 编译项目下应用，包含驱动，下位机的主控，服务器程序，打包成firmware
# 同时复制到nfs路径下，用于驱动板远程访问
function build_driver_module()
{
	cd $ENV_PATH_ROOT
	if [ -f "$ENV_KERNEL_DIR/.config" ]; then
		echo "start bulid kernal driver"
		cd $ENV_PATH_KERNAL_MOD/
		
		#执行全部的make_modules
		make
	else
		echo "without compiled linux kernal, not build kernal module"
	fi
}
alias test_build_driver_module='build_driver_module'

function build_support_library()
{
	cd $APPLICATION_THIRDPARTS
	if [ "${APP_CC_COMPILE}" == "g++" ]; then
		echo "start build lib:${APPLICATION_BUILDOUT}/libjsoncpp.a"
		if [ ! -f ${APPLICATION_BUILDOUT}/libjsoncpp.a ]; then
			cd $APPLICATION_THIRDPARTS/jsoncpp
			make -j4
		else
			echo "x86 libjson exist. not build!"
		fi
	else
		echo "start build lib:${APPLICATION_BUILDOUT}/libjsoncpp.a"
		if [ ! -f ${APPLICATION_BUILDOUT}/libjsoncpp.a ]; then
			cd ${APPLICATION_THIRDPARTS}/jsoncpp
			make -j4
		else
			echo "arm libjson exist. not build!"
		fi
	fi
}

function SysBuildApplication()
{
	echo frimware path:$ENV_PATH_ROOT
	echo kernal dir:$ENV_KERNEL_DIR 

	#编译驱动地址
	build_driver_module

	#复制配置文件
	cd $ENV_PATH_ROOT
	cp config.template.json $APPLICATION_RUN/config.json

	#编译支持的库
	build_support_library

	#编译并复制main_process进程
	cd ${APPLICATION_EMBED}/
	make -j${CPU_CORE}
	exit_if_last_error
		
	#打包服务器程序(包含node的后台和前端页面)
	cd ${APPLICATION_EMBED}/
	if [ ! -d $APPLICATION_RUN/server/ ]; then
		mkdir $APPLICATION_RUN/server/ 
	fi
	cp -rv node_server/* $APPLICATION_RUN/server/

	#将编译好的项目复制到nfs目录指定位置
	#采用nfs启动后即可执行
	if [ ${FIRMWARE_CURRENT_PLATFORMS} == "Embed-Linux" ]; then
		
		#复制可执行程序
		cp ${APPLICATION_BUILDOUT}/main_process $APPLICATION_RUN/bin/
		cp ${APPLICATION_BUILDOUT}/lower_device $APPLICATION_RUN/bin/
		
		if [ -d $NFS_RUN_PATH ]; then
			cp -rv $APPLICATION_RUN/* $NFS_RUN_PATH/
		else
			echo "nfs directory $NFS_RUN_PATH not exist, not copy!"
		fi
	fi

	cda
}
alias SysBuildApplication='SysBuildApplication'

#将打包好的文件通过ssh推送到嵌入式linux设备端
#需要嵌入式linux设备端支持ssh服务，且$EMBED_DEVICE_IPADDRESS一致
function SysPushApplication
{
	echo filepath:$ENV_BUILD, ipaddress:$EMBED_DEVICE_IPADDRESS
	scp -r $ENV_BUILD/remote_manage_v$FMWARE_VESRION.tar.bz2 root@$EMBED_DEVICE_IPADDRESS:/tmp/
}
alias SysPushApplication='SysPushApplication'

#清除firmware，包含编译的中间文件和打包后的firmware.
function SysCleanApplication
{
	cd $APP_MAIN_PORCESS
	make clean

	#回到项目的地址
	cda
}
alias SysCleanApplication='SysCleanApplication'

#执行firmware，仅限于linux环境下编译的应用，主要用于测试
function SysExecuteFirmware
{
	$ENV_BUILD_BIN/app_demo -f $ENV_BUILD_FIRMWARE/config.json
}
alias SysExecuteFirmware='SysExecuteFirmware'

#关闭firmware，仅限于linux环境下编译的应用，主要用于测试
function SysKillFirmware
{
	echo "kill main_process lower_device"
	sudo pkill -9 lower_device
	sudo pkill -9 main_process
}
alias SysKillFirmware='SysKillFirmware'

#将配置参数写入到$ENV_CONFIG_FILE，在启动时即可读取
#一般不单独调用
function SysUpdateConfig
{
	truncate -s 0 $ENV_CONFIG_FILE
	echo "$FIRMWARE_CURRENT_PLATFORMS">$ENV_CONFIG_FILE
	echo "$FMWARE_VESRION">>$ENV_CONFIG_FILE
	echo "$EMBED_DEVICE_IPADDRESS">>$ENV_CONFIG_FILE
	exec bash
}

#设置当前环境为编译嵌入式Linux平台的配置
function SysSetPlatformEmbedLinux
{
	export FIRMWARE_CURRENT_PLATFORMS="Embed-Linux"
	SysUpdateConfig
}
alias SysSetPlatformEmbedLinux='SysSetPlatformEmbedLinux'

#设置当前环境为编译Linux平台的配置
function SysSetPlatformLinux
{
	export FIRMWARE_CURRENT_PLATFORMS="Linux"
	SysUpdateConfig
}
alias SysSetPlatformLinux='SysSetPlatformLinux'

#设置嵌入式端设备IP地址，主要配合SysPushApplication使用
function SysSetRemoteIpAddress
{
	if [ $# -eq 1 ]; then
		export EMBED_DEVICE_IPADDRESS=$1
		echo "Set Remote IpAddress is $1"
		SysUpdateConfig
	else
		echo "one parameter about ipaddress need!"
	fi
}
alias SysSetRemoteIpAddress='SysSetRemoteIpAddress'

#设置打包的firmware的版本号，升级时使用
function SysSetApplicationVer
{
	if [ $# -eq 1 ]; then
		export FMWARE_VESRION=$1
		echo "Set Firmware Version is $1"
		SysUpdateConfig
	else
		echo "one parameter about firmware version need!"
	fi
}
alias SysSetApplicationVer='SysSetApplicationVer'

#编译linux内核
#对于内核目录，需要提前构建好配置定义，此命令仅进行编译
#因为最新的gcc编译会无法执行，所以指定了$KERNEL_CC对应的编译器
function SysBuildKernel
{
	if [ -d $ENV_KERNEL_DIR ]; then
		cd $ENV_KERNEL_DIR

		echo "compiler:$KERNEL_CC"
		make ARCH=arm CROSS_COMPILE=$KERNEL_CC imx_v7_defconfig
		make V=1 ARCH=arm CROSS_COMPILE=$KERNEL_CC all -j4

		if [ -f $ENV_KERNEL_ZIMAGE ]; then
			cp -avf $ENV_KERNEL_ZIMAGE $TFTP_PATH/
			cp -avf $ENV_KERNEL_DTB $TFTP_PATH/
		else
			echo "${redText}Linux Kernel build failed, please check!${defText}"
		fi
	else
		echo "Kernal Directory:$ENV_KERNEL_DIR not exist!"
	fi
}
alias SysBuildKernel='SysBuildKernel'

#清除内核编译
function SysCleanKernel
{
	if [ -d $ENV_KERNEL_DIR ]; then
		cd $ENV_KERNEL_DIR
		make distclean
	else
		echo "Kernal Directory:$ENV_KERNEL_DIR not exist!"
	fi
}
alias SysCleanKernel='SysCleanKernel'

#编译uboot
#对于uboot目录，需要提前构建好配置定义，此命令仅进行编译
function SysBuildUboot
{
	uboot_file="u-boot.imx"

	if [ -d $ENV_BOOT_DIR ]; then
		cd $ENV_BOOT_DIR

		echo "compiler:$NEW_KERNEL_CC"
		make ARCH=arm CROSS_COMPILE=$NEW_KERNEL_CC mx6ull_14x14_evk_emmc_defconfig
		make V=1 ARCH=arm CROSS_COMPILE=$NEW_KERNEL_CC all -j4

		if [ -f u-boot-dtb.imx ]; then
			uboot_file="u-boot-dtb.imx"
		fi

		cp -avf ${uboot_file} $TFTP_PATH/
	else
		echo "uboot directory:$ENV_BOOT_DIR not exist!"
	fi
}
alias SysBuildUboot='SysBuildUboot'

#清除uboot编译
function SysCleanUboot
{
	if [ -d $ENV_BOOT_DIR ]; then
		cd $ENV_BOOT_DIR
		make distclean
	else
		echo "uboot directory:$ENV_BOOT_DIR not exist!"
	fi
}
alias SysCleanUboot='SysCleanUboot'

#编译rootfs
#编译后的文件提交到nfs目录下
function SysBuildRootfs
{
	if [ -d $ENV_ROOTFS_DIR ]; then
		cd $ENV_ROOTFS_DIR

		echo "copy user defined."
		sudo chmod -Rv 755 ${ENV_PATH_ROOT}/rootfs/etc
		sudo cp -ravf ${ENV_PATH_ROOT}/rootfs/* ${NFS_PATH}/

		make -j4
		make install

		sudo cp -ravf $ENV_ROOTFS_DIR/_install/* $NFS_PATH/
		
		#copy C/C++ library
		echo "copy c++ library"
		cd $GCC_LIB/lib
		cp -ravf *so* *.a $NFS_PATH/lib/

		echo "copy c library"
		cd $GCC_LIB/libc/lib
		cp -ravf *so* *.a $NFS_PATH/lib/

		cdn
	else
		echo "rootfs directory:$ENV_ROOTFS_DIR not exist!"
	fi
}
alias SysBuildRootfs='SysBuildRootfs'

#清除文件系统
function SysCleanRootfs
{
	if [ -d $ENV_ROOTFS_DIR ]; then
		cd $ENV_ROOTFS_DIR
		make clean
	else
		echo "rootfs directory:$ENV_ROOTFS_DIR not exist!"
	fi
}
alias SysCleanRootfs='SysCleanRootfs'

#打包内核 firmware包，文件系统到$DST_PATH，对于新的工程环境，命令执行流程
#SysCleanUboot
#SysBuildUboot
#SysCleanKernel
#SysCleanRootfs
#SysBuildRootfs
#SysSetApplicationVer [version]
#SysBuildApplication
#SysPackageFirmware
function SysPackageFirmware
{
	if [ -d $TFTP_PATH ]; then

		if [ ! -d $DST_PATH ]; then
			mkdir $DST_PATH 
		fi

		cd $TFTP_PATH
		cp -rvf * $DST_PATH/
		
		cd $DST_PATH/
		mv u-boot-dtb.imx $ENV_KERNAL_UBOOT
	fi

	if [ -d $NFS_PATH ]; then
		cd $NFS_PATH
		rm -rf rootfs.tar.bz2 
		tar -vcjf rootfs.tar.bz2 *
		mv rootfs.tar.bz2 $DST_PATH/
	fi

	echo "PackFirmware Success, you can find firmware in directory:"
	echo "$DST_PATH/"
}
alias SysPackageFirmware='SysPackageFirmware'

#显示帮助信息
function SysHelpCommand
{
	echo "${blueText}SysPullAll${defText}"
	echo "    ${limityellowText}Pull all thirdpart application for build."
	echo "${blueText}SysBuildApplication${defText}"
	echo "    ${limityellowText}Build Application, Package Firmware."
	echo "${blueText}SysBuildKernel${defText}"
	echo "    ${limityellowText}Build the Kernal, if exist kernal directory."
	echo "${blueText}SysSetPlatformEmbedLinux${defText}"
	echo "    ${limityellowText}Set Current Platform to Embed-Linux Complier."
	echo "${blueText}SysSetPlatformLinux${defText}"
	echo "    ${limityellowText}Set Current Platform to Linux Complier."
	echo "${blueText}SysSetRemoteIpAddress${defText}"
	echo "    ${limityellowText}example:${cyanText}SysSetRemoteIpAddress 192.168.0.1."
	echo "    ${limityellowText}Set the remote ipaddress for command <SysPushApplication>"
	echo "${blueText}SysSetApplicationVer${defText}"
	echo "    ${limityellowText}example:${cyanText}SysSetRemoteIpAddress 1.0.0.1."
	echo "    ${limityellowText}Set the verison of the firmware when build"
	echo "${blueText}SysBuildApplication${defText}"
	echo "    ${limityellowText}Build the application, copy to nfs directory, also can push to embed-linux device."
	echo "${blueText}SysPushApplication${defText}"
	echo "    ${limityellowText}Push firmware to remote embed-linux device."
	echo "${blueText}SysCleanApplication${defText}"
	echo "    ${limityellowText}Clean the app firmware for next."
	echo "${blueText}SysBuildKernel${defText}"
	echo "    ${limityellowText}Build the linux kernal, copy to tftp directory, if failed, execute SysCleanKernel first."
	echo "${blueText}SysCleanKernel${defText}"
	echo "    ${limityellowText}Clean the kernal compiler data for next."
	echo "${blueText}SysBuildUboot${defText}"
	echo "    ${limityellowText}Build the uboot, copy to tftp directory, if failed, execute SysCleanUboot first."
	echo "${blueText}SysCleanUboot${defText}"
	echo "    ${limityellowText}Clean the uboot compiler data for next."
	echo "${blueText}SysBuildRootfs${defText}"
	echo "    ${limityellowText}build the rootfs, copy to nfs directory, if failed, execut SysCleanRootfs first."
	echo "${blueText}SysCleanRootfs${defText}"
	echo "    ${limityellowText}Clean the rootfs compiler data for next."
	echo "${blueText}SysPackageFirmware${defText}"
	echo "    ${limityellowText}Package the uboot, kernal, rootfs and application, can use tools download."
	echo "${blueText}SysHelpCommand${defText}"
	echo "    ${limityellowText}Show the help command.${defText}"
}
alias SysHelpCommand='SysHelpCommand'

echo "Update the Alias Command Success!"