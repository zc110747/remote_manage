################################################################################
# This file is used to define global vars, if want to create the build system, 
# also need update the file.
#
################################################################################

echo "Load the Env Data..."

#-------------------------------------------------------------------------------
# This section defines the internal 
# Not need Change unless program change.
#-------------------------------------------------------------------------------
export CPU_CORE=2

export PROGRAM_PATH=/home/program
export PROGRAM_SUPPORT=$PROGRAM_PATH/support
export PROGRAM_BUILD=$PROGRAM_PATH/build
export PROGRAM_APPLICATION=$PROGRAM_PATH/application
export PROGRAM_DOWNLOAD=$PROGRAM_PATH/download

#GCC compile path info
#support old gcc to build kernel(version low, update linux kernel next)
export OLD_GCC_PATH=$PROGRAM_SUPPORT/old_compiler/bin/
export KERNEL_CC=$OLD_GCC_PATH/arm-linux-gnueabihf-
export NEW_GCC_PATH=$PROGRAM_SUPPORT/compiler/bin/
export NEW_KERNEL_CC=$NEW_GCC_PATH/arm-none-linux-gnueabihf-
export GCC_LIB=$PROGRAM_SUPPORT/compiler/arm-none-linux-gnueabihf
export AARCH_GCC_PATH=${PROGRAM_SUPPORT}/aarch64_compiler/bin/

#Add directory to PATH
export PATH=$PATH:${NEW_GCC_PATH}:${OLD_GCC_PATH}:${AARCH_GCC_PATH}

#uboot infos
export ENV_BOOT_DIR=$PROGRAM_SUPPORT/uboot
export ENV_KERNAL_UBOOT="u-boot-imx6ull-14x14-ddr512-emmc.imx"

#kernel info
export ENV_KERNEL_DIR=$PROGRAM_SUPPORT/kernel
export ENV_KERNEL_ZIMAGE=$ENV_KERNEL_DIR/arch/arm/boot/zImage
export ENV_KERNEL_DTB=$ENV_KERNEL_DIR/arch/arm/boot/dts/imx6ull-14x14-emmc-4.3-800x480-c.dtb

#rootfs info
export ENV_ROOTFS_DIR=$PROGRAM_SUPPORT/rootfs

#build output info
export TFTP_PATH=$PROGRAM_BUILD/tftp_root
export NFS_PATH=$PROGRAM_BUILD/nfs_root
export NFS_RUN_PATH="$NFS_PATH/run/"
export DST_PATH="/home/freedom/Desktop/Firmware"
export ENV_CONFIG_FILE="$ENV_PATH_ENVIRONMENT/EnvConfig.mk"

#-------------------------------------------------------------------------------
# This section defines the default internal config
#-------------------------------------------------------------------------------
export EMBED_DEVICE_IPADDRESS=""
export FIRMWARE_CURRENT_PLATFORMS=""
export FMWARE_VESRION=""

#-------------------------------------------------------------------------------
# ProcessConfig.
#-------------------------------------------------------------------------------
declare -a array
while read line; do
    array+=("$line")
done < $ENV_CONFIG_FILE
FIRMWARE_CURRENT_PLATFORMS="${array[0]}"
FMWARE_VESRION="${array[1]}"
EMBED_DEVICE_IPADDRESS="${array[2]}"

#-------------------------------------------------------------------------------
# This section defined the word color.
#-------------------------------------------------------------------------------
readonly defText="$(tput sgr0)"
readonly redText="$(tput setaf 1)"
readonly greenText="$(tput setaf 2)"
readonly yellowText="$(tput setaf 3)"
readonly limityellowText="$(tput setaf 190)"
readonly powerblueText="$(tput setaf 153)"
readonly blueText="$(tput setaf 4)"
readonly magentaText="$(tput setaf 5)"
readonly cyanText="$(tput setaf 6)"
readonly whiteText="$(tput setaf 7)"
readonly brightText="$(tput bold)"
readonly blinkText="$(tput blink)"
readonly reverseText="$(tput smso)"
readonly underlineText="$(tput smul)"

# Now define an global platforms for all the type support
# Linuxï¼šused for PC software
# Embed-Linux: used for Embed Software
export FIRMWARE_SUPPORT_PLATFORMS="ARM AARCH64"

# Now define an array that contains the space-separated list defined above.
declare -a supportedPlatforms=($FIRMWARE_SUPPORT_PLATFORMS)

#-------------------------------------------------------------------------------
# This section defines the compiler and compiler config.
# Only Change if need.
#-------------------------------------------------------------------------------
if [[ "${supportedPlatforms[0]}" == "${FIRMWARE_CURRENT_PLATFORMS}" ]]; then
    #Embed-Linux
    export APP_C_COMPILE=arm-none-linux-gnueabihf-gcc
    export APP_CC_COMPILE=arm-none-linux-gnueabihf-g++
    export APP_AR_COMPILE=arm-none-linux-gnueabihf-ar
    export APPLICATION_BUILDOUT=$ENV_PATH_ROOT/buildout/arm
    export GLOBAL_INTALL=${PROGRAM_PATH}/install/arm
elif [[ "${supportedPlatforms[1]}" == "${FIRMWARE_CURRENT_PLATFORMS}" ]]; then
    export APP_C_COMPILE=aarch64-linux-gnu-gcc
    export APP_CC_COMPILE=aarch64-linux-gnu-g++
    export APP_AR_COMPILE=aarch64-linux-gnu-ar
    export APPLICATION_BUILDOUT=$ENV_PATH_ROOT/buildout/aarch64
    export GLOBAL_INTALL=${PROGRAM_PATH}/install/aarch64
else
    echo "${redText}error platform $FIRMWARE_CURRENT_PLATFORMS not exist in list of support${defText}"
fi

#-------------------------------------------------------------------------------
# This section defines the path for the program
# Not need Change unless program change.
#-------------------------------------------------------------------------------
#kernal_mod
export ENV_PATH_KERNAL_MOD="${ENV_PATH_ROOT}/mod"

#application 
export APP_ROOTFS=${ENV_PATH_ROOT}/rootfs
export APP_ROOTFS_LIB=${APP_ROOTFS}/lib
export APPLICATION_SYS=${APP_ROOTFS}/home/sys
export APPLICATION_EXE=${APPLICATION_SYS}/executable
export APPLICATION_THIRDPARTS=${ENV_PATH_ROOT}/thirdparts
export APPLICATION_EMBED=${ENV_PATH_ROOT}/embed
export APP_MAIN_PORCESS=${APPLICATION_EMBED}/main_process
export APP_BUILD_DRIVER=${APP_ROOTFS}/home/sys/modules

export ENV_BUILD=$PROGRAM_APPLICATION/build
export ENV_BUILD_FIRMWARE=$ENV_BUILD/firmware
export ENV_BUILD_BIN=$ENV_BUILD_FIRMWARE/bin

#-------------------------------------------------------------------------------
# Env Vars define finish shows
#-------------------------------------------------------------------------------
echo "Update Environment Data Success!"
echo "Can use command '${greenText}SysHelpCommand${defText}' for more helps."
echo "Current Platform is ${greenText}$FIRMWARE_CURRENT_PLATFORMS${defText}, Remote IPAdress is ${greenText}$EMBED_DEVICE_IPADDRESS${defText}."
echo "Current Firmware Version is ${greenText}$FMWARE_VESRION${defText}."
