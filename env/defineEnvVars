################################################################################
# This file is used to define global vars, if want to create the build system, 
# also need update the file.
#
################################################################################

echo "Load the Env Data..."

#-------------------------------------------------------------------------------
# This section defines the internal 
# Not need Change unless program change.
#-------------------------------------------------------------------------------
export CPU_CORE=6
export PROGRAM_SDK_PATH="${ENV_PATH_ROOT}"/../sdk
export PROGRAM_DOWNLOAD="${PROGRAM_SDK_PATH}"/download
export ENV_CONFIG_FILE="${ENV_PATH_ENVIRONMENT}"/EnvConfig.mk
export DST_PATH="/home/freedom/Desktop/Firmware"

#-------------------------------------------------------------------------------
# This section defines the default internal config
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# ProcessConfig.
#-------------------------------------------------------------------------------
declare -a array
while read line; do
    array+=("$line")
done < $ENV_CONFIG_FILE
export FIRMWARE_CURRENT_PLATFORMS="${array[0]}"
export FMWARE_VESRION="${array[1]}"
export ROOTFS_RUN="${array[2]}"

#-------------------------------------------------------------------------------
# This section defined the word color.
#-------------------------------------------------------------------------------
readonly defText="$(tput sgr0)"
readonly redText="$(tput setaf 1)"
readonly greenText="$(tput setaf 2)"
readonly yellowText="$(tput setaf 3)"
readonly limityellowText="$(tput setaf 190)"
readonly powerblueText="$(tput setaf 153)"
readonly blueText="$(tput setaf 4)"
readonly magentaText="$(tput setaf 5)"
readonly cyanText="$(tput setaf 6)"
readonly whiteText="$(tput setaf 7)"
readonly brightText="$(tput bold)"
readonly blinkText="$(tput blink)"
readonly reverseText="$(tput smso)"
readonly underlineText="$(tput smul)"

# Now define an global platforms for all the type support
# Linux：used for PC software
# Embed-Linux: used for Embed Software
export FIRMWARE_SUPPORT_PLATFORMS="ARM AtomPi WalnutPi"

# Now define an array that contains the space-separated list defined above.
declare -a supportedPlatforms=($FIRMWARE_SUPPORT_PLATFORMS)

#-------------------------------------------------------------------------------
# This section defines the compiler and compiler config.
# Only Change if need.
#-------------------------------------------------------------------------------
if [[ "${supportedPlatforms[0]}" == "${FIRMWARE_CURRENT_PLATFORMS}" ]]; then
    export ENV_ARCH=arm
elif [[ "${supportedPlatforms[1]}" == "${FIRMWARE_CURRENT_PLATFORMS}" ]]; then
    export ENV_ARCH=atompi
elif [[ "${supportedPlatforms[2]}" == "${FIRMWARE_CURRENT_PLATFORMS}" ]]; then
    export ENV_ARCH=walnutpi
else
    echo "${redText}error platform $FIRMWARE_CURRENT_PLATFORMS not exist in list of support${defText}"
    exit 1
fi

#sdk基础目录
export BUILD_NFS_PATH="${PROGRAM_SDK_PATH}"/nfs
export BUILD_TFTP_PATH="${PROGRAM_SDK_PATH}"/tftp
export PROGRAM_SDK_PLATFORM_PATH="${PROGRAM_SDK_PATH}"/"${ENV_ARCH}"

#平台根目录:sdk/arm/
export SUPPORT_ENV_BOOT_DIR="${PROGRAM_SDK_PLATFORM_PATH}"/u-boot
export SUPPORT_ENV_KERNEL_DIR="${PROGRAM_SDK_PLATFORM_PATH}"/kernel
export SUPPORT_ENV_ROOTFS_DIR="${PROGRAM_SDK_PLATFORM_PATH}"/rootfs
export SUPPORT_ENV_INSTALL="${PROGRAM_SDK_PLATFORM_PATH}"/install
export SUPPORT_ENV_PACKAGE="${PROGRAM_SDK_PLATFORM_PATH}"/package

#二级rootfs目录:sdk/arm/rootfs
export SUPPORT_FS_BUILDROOT_DIR="${SUPPORT_ENV_ROOTFS_DIR}"/buildroot
export SUPPORT_FS_DEBIAN_DIR="${SUPPORT_ENV_ROOTFS_DIR}"/debian
export SUPPORT_FS_UBUNTU_DIR="${SUPPORT_ENV_ROOTFS_DIR}"/ubuntu
export PROGRAM_FS_IMG="${SUPPORT_ENV_ROOTFS_DIR}"/img

export SUPPORT_GCC_PATH="${PROGRAM_SDK_PLATFORM_PATH}"/toolchain/bin

export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"
export PATH="${PATH}":"${SUPPORT_GCC_PATH}"

if [[ "${supportedPlatforms[0]}" == "${FIRMWARE_CURRENT_PLATFORMS}" ]]; then
    export ENV_KERNAL_UBOOT=u-boot-imx6ull-14x14-ddr512-emmc.imx
    export APP_C_COMPILE=arm-none-linux-gnueabihf-gcc
    export APP_CC_COMPILE=arm-none-linux-gnueabihf-g++
    export APP_AR_COMPILE=arm-none-linux-gnueabihf-ar

    export PLATFORM_LINUX_PATH="${ENV_PATH_ROOT}"/platform/I.MX6ULL/linux-imx-lf-6.1.y-patch
    export PLATFORM_UBOOT_PATH="${ENV_PATH_ROOT}"/platform/I.MX6ULL/uboot-imx-lf_v2022.04-patch
    export PLATFORM_BUILDROOT_PATH="${ENV_PATH_ROOT}"/platform/I.MX6ULL/buildroot-2023.02.9-patch
    export PLATFORM_INSTALL_SHELL="${ENV_PATH_ROOT}"/platform/I.MX6ULL/platform-shell
    export PLATFORM_UBOOT_SHELL="${ENV_PATH_ROOT}"/platform/I.MX6ULL/bootcmd-shell

    export NEW_KERNEL_CC="${SUPPORT_GCC_PATH}"/arm-none-linux-gnueabihf-
    export GCC_LIB=$PROGRAM_SUPPORT/compiler/arm-none-linux-gnueabihf
else
    export APP_C_COMPILE=aarch64-none-linux-gnu-gcc
    export APP_CC_COMPILE=aarch64-none-linux-gnu-g++
    export APP_AR_COMPILE=aarch64-none-linux-gnu-ar

    export NEW_KERNEL_CC="${SUPPORT_GCC_PATH}"/aarch64-none-linux-gnu-
    export GCC_LIB="${PROGRAM_SUPPORT}"/compiler/arm-none-linux-gnueabihf
fi

#-------------------------------------------------------------------------------
# This section defines the path for the program
# Not need Change unless program change.
#-------------------------------------------------------------------------------
export APPLICATION_MOD="${ENV_PATH_ROOT}"/mod
export APPLICATION_ROOTFS="${ENV_PATH_ROOT}"/rootfs
export APPLICATION_THIRDPARTS=${ENV_PATH_ROOT}/thirdparts
export APPLICATION_EMBED="${ENV_PATH_ROOT}"/embed
export APPLICATION_EMBED_MODUILES="${BUILD_NFS_PATH}"/home/sys/modules
export APPLICATION_PLATFORM="${ENV_PATH_ROOT}"/platform

#-------------------------------------------------------------------------------
# Env Vars define finish shows
#-------------------------------------------------------------------------------
echo "Update Environment Data Success!"
echo "Can use command '${greenText}SysHelpCommand${defText}' for more helps."
echo "Current Platform is ${greenText}$FIRMWARE_CURRENT_PLATFORMS${defText}."
echo "Current ROOTFS is ${greenText}$ROOTFS_RUN${defText}."
echo "Current Firmware Version is ${greenText}$FMWARE_VESRION${defText}."
