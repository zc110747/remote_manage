################################################################################
# This file is used to define global command, no need update the file unless 
# want to extend the global command.
#
################################################################################

echo "Update the Alias Command..."

#-------------------------------------------------------------------------------
# This section defines the alias of the command.
# The command abbreviation for use.
#-------------------------------------------------------------------------------
alias ll="ls -alF"
alias pe="printenv"
alias se="saveenv"

alias cdr="cd $ENV_PATH_ROOT"
alias cdk="cd $ENV_KERNEL_DIR"
alias cdu="cd $ENV_BOOT_DIR"
alias cdf="cd $ENV_ROOTFS_DIR"
alias cdl="cd $ENV_PATH_LOWER_APP"
alias cdn="cd $NFS_PATH"
alias cdlm="cd $ENV_PATH_LOWER_APP_MANAGE"
alias cdls="cd $ENV_PATH_LOWER_APP_SERVER"

#-------------------------------------------------------------------------------
# This section defines the function for program management.
# The Extend Command for program compiler, package, push.
#-------------------------------------------------------------------------------
# 编译项目下应用，包含驱动，下位机的主控，服务器程序，打包成firmware
# 同时复制到nfs路径下，用于驱动板远程访问
function SysBuildApplication()
{
	echo frimware path:$ENV_PATH_ROOT
	echo kernal dir:$ENV_KERNEL_DIR 

	#asio库以压缩包形式进行上传,首次使用需要解压
	if [ ! -d "$ENV_PATH_LOWER_APP_MANAGE/lib/asio" ]; then
		cd $ENV_PATH_LOWER_APP_MANAGE/lib/
		tar -xvf asio.tar.bz2
		echo "create asio library for manage sucess"
	else
		echo "already exist asio, can build"
	fi

	#编译驱动地址
	cd $ENV_PATH_ROOT
	if [ -d "$ENV_KERNEL_DIR" ]; then
		echo "start bulid kernal driver"
		cd $ENV_PATH_KERNAL_MOD/led/
		make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-
		mv kernal_led.ko ../../package/driver/
		make clean

		cd $ENV_PATH_KERNAL_MOD/beep/
		make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-
		mv kernal_beep.ko ../../package/driver/
		make clean

		cd $ENV_PATH_KERNAL_MOD/i2c_ap/
		make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-
		mv kernal_i2c_ap.ko ../../package/driver/
		make clean

		cd $ENV_PATH_KERNAL_MOD/spi_icm/
		make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-
		mv kernal_spi_icm.ko ../../package/driver/
		make clean

		cd $ENV_PATH_KERNAL_MOD/key/
		make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-
		mv kernal_key.ko ../../package/driver/
		make clean
	else
		echo "without linux kernal, not build kernal module"
	fi

	#覆盖配置文件
	cp -f $ENV_PATH_PACKAGE/config.json $ENV_PATH_LOWER_APP_MANAGE/config.json
	cp -f $ENV_PATH_PACKAGE/version.json $ENV_PATH_LOWER_APP_MANAGE/version.json
	cp -f $ENV_PATH_PACKAGE/config.json $ENV_PATH_LOWER_APP_SERVER/config.json
	cp -f $ENV_PATH_PACKAGE/version.json $ENV_PATH_LOWER_APP_SERVER/version.json

	#编译程序
	cd $ENV_PATH_LOWER_APP_MANAGE
	make -j4
	cd $ENV_PATH_ROOT
	if [ -f lower_app/Executables/app_demo ]; then
		cp lower_app/Executables/app_demo package/
	else
		echo "${redText}Application compiler failed, please check the logs for more information!${defText}"
		return
	fi

	#打包服务器程序(包含node的后台和前端页面),拷贝到输出目录
	cd lower_app/
	tar -vcjf server.tar.bz2 server/ 
	cd ../
	mv lower_app/server.tar.bz2 package/

	#压缩完整包
	cd package/
	tar -vcjf remote_manage_v$FMWARE_VESRION.tar.bz2 *
	rm server.tar.bz2

	#将编译好的项目复制到nfs目录指定位置
	#采用nfs启动后即可执行
	if [ -d $NFS_RUN_PATH ]; then
		rm -rf $NFS_RUN_PATH/*
		cd $ENV_PATH_ROOT
		cp package/app_demo $NFS_RUN_PATH/
		cp package/config.json $NFS_RUN_PATH/
		cp package/startApp $NFS_RUN_PATH/
		cp package/SysUpdate $NFS_RUN_PATH/
		cp -rf package/driver/ $NFS_RUN_PATH/
		cp -rf lower_app/server/ $NFS_RUN_PATH/
	else
		echo "nfs directory $NFS_RUN_PATH not exist, not copy!"
	fi

	cdr
}
alias SysBuildApplication='SysBuildApplication'

#将打包好的文件通过ssh推送到嵌入式linux设备端
#需要嵌入式linux设备端支持ssh服务，且$EMBED_DEVICE_IPADDRESS一致
function SysPushApplication
{
	echo filepath:$ENV_PATH_PACKAGE, ipaddress:$EMBED_DEVICE_IPADDRESS
	scp -r $ENV_PATH_PACKAGE/remote_manage_v$FMWARE_VESRION.tar.bz2 root@$EMBED_DEVICE_IPADDRESS:/tmp/
}
alias SysPushApplication='SysPushApplication'

#清除firmware，包含编译的中间文件和打包后的firmware.
function SysCleanApplication
{
	rm $ENV_PATH_PACKAGE/remote_manage_v$FMWARE_VESRION.tar.bz2
	cd $ENV_PATH_LOWER_APP_MANAGE
	make clean

	#回到项目的地址
	cdr
}
alias SysCleanApplication='SysCleanApplication'

#执行firmware，仅限于linux环境下编译的应用，主要用于测试
function SysExecuteFirmware
{
	$ENV_PATH_PACKAGE/app_demo -f $ENV_PATH_PACKAGE/config.json
}
alias SysExecuteFirmware='SysExecuteFirmware'

#关闭firmware，仅限于linux环境下编译的应用，主要用于测试
function SysKillFirmware
{
	pkill -9 app_demo
}
alias SysKillFirmware='SysKillFirmware'

#将配置参数写入到$ENV_CONFIG_FILE，在启动时即可读取
#一般不单独调用
function SysUpdateConfig
{
	truncate -s 0 $ENV_CONFIG_FILE
	echo "$FIRMWARE_CURRENT_PLATFORMS">$ENV_CONFIG_FILE
	echo "$FMWARE_VESRION">>$ENV_CONFIG_FILE
	echo "$EMBED_DEVICE_IPADDRESS">>$ENV_CONFIG_FILE
	exec bash
}

#设置当前环境为编译嵌入式Linux平台的配置
function SysSetPlatformEmbedLinux
{
	export FIRMWARE_CURRENT_PLATFORMS="Embed-Linux"
	SysUpdateConfig
}
alias SysSetPlatformEmbedLinux='SysSetPlatformEmbedLinux'

#设置当前环境为编译Linux平台的配置
function SysSetPlatformLinux
{
	export FIRMWARE_CURRENT_PLATFORMS="Linux"
	SysUpdateConfig
}
alias SysSetPlatformLinux='SysSetPlatformLinux'

#设置嵌入式端设备IP地址，主要配合SysPushApplication使用
function SysSetRemoteIpAddress
{
	if [ $# -eq 1 ]; then
		export EMBED_DEVICE_IPADDRESS=$1
		echo "Set Remote IpAddress is $1"
		SysUpdateConfig
	else
		echo "one parameter about ipaddress need!"
	fi
}
alias SysSetRemoteIpAddress='SysSetRemoteIpAddress'

#设置打包的firmware的版本号，升级时使用
function SysSetApplicationVer
{
	if [ $# -eq 1 ]; then
		export FMWARE_VESRION=$1
		echo "Set Firmware Version is $1"
		SysUpdateConfig
	else
		echo "one parameter about firmware version need!"
	fi
}
alias SysSetApplicationVer='SysSetApplicationVer'

#编译linux内核
#对于内核目录，需要提前构建好配置定义，此命令仅进行编译
#因为最新的gcc编译会无法执行，所以指定了$KERNAL_CC对应的编译器
function SysBuildKernel
{
	if [ -d $ENV_KERNEL_DIR ]; then
		cd $ENV_KERNEL_DIR
		make V=1 ARCH=arm CROSS_COMPILE=$KERNAL_CC all -j4

		cp -avf $ENV_KERNEL_ZIMAGE $TFTP_PATH/
		cp -avf $ENV_KERNEL_DTB $TFTP_PATH/
	else
		echo "Kernal Directory:$ENV_KERNEL_DIR not exist!"
	fi
}
alias SysBuildKernel='SysBuildKernel'

#清除内核编译
function SysCleanKernel
{
	if [ -d $ENV_KERNEL_DIR ]; then
		cd $ENV_KERNEL_DIR
		make distclean
		make ARCH=arm CROSS_COMPILE=$KERNAL_CC imx_v7_defconfig
	else
		echo "Kernal Directory:$ENV_KERNEL_DIR not exist!"
	fi
}
alias SysCleanKernel='SysCleanKernel'

#编译uboot
#对于uboot目录，需要提前构建好配置定义，此命令仅进行编译
function SysBuildUboot
{
	if [ -d $ENV_BOOT_DIR ]; then
		cd $ENV_BOOT_DIR
		echo "compiler:$NEW_KERNAL_CC"
		make V=1 ARCH=arm CROSS_COMPILE=$NEW_KERNAL_CC all -j4
		cp -avf u-boot-dtb.imx $TFTP_PATH/
	else
		echo "uboot directory:$ENV_BOOT_DIR not exist!"
	fi
}
alias SysBuildUboot='SysBuildUboot'

#清除uboot编译
function SysCleanUboot
{
	if [ -d $ENV_BOOT_DIR ]; then
		cd $ENV_BOOT_DIR
		make distclean
		make ARCH=arm CROSS_COMPILE=$NEW_KERNAL_CC mx6ull_14x14_evk_emmc_defconfig
	else
		echo "uboot directory:$ENV_BOOT_DIR not exist!"
	fi
}
alias SysCleanUboot='SysCleanUboot'

#编译rootfs
#编译后的文件提交到nfs目录下
function SysBuildRootfs
{
	if [ -d $ENV_ROOTFS_DIR ]; then
		cd $ENV_ROOTFS_DIR
		make&&make install

		cp -ravf $ENV_ROOTFS_DIR/_install/* $NFS_PATH/
		
		echo "copy c++ library"
		cd $GCC_LIB/lib
		cp -ravf *so* *.a $NFS_PATH/lib/

		echo "copy c library"
		cd $GCC_LIB/libc/lib
		cp -ravf *so* *.a $NFS_PATH/lib/
	else
		echo "rootfs directory:$ENV_ROOTFS_DIR not exist!"
	fi
}
alias SysBuildRootfs='SysBuildRootfs'

#清除文件系统
function SysCleanRootfs
{
	if [ -d $ENV_ROOTFS_DIR ]; then
		cd $ENV_ROOTFS_DIR
		make clean
	else
		echo "rootfs directory:$ENV_ROOTFS_DIR not exist!"
	fi
}
alias SysCleanRootfs='SysCleanRootfs'

#打包内核 firmware包，文件系统到$DST_PATH，对于新的工程环境，命令执行流程
#SysCleanUboot
#SysBuildUboot
#SysCleanKernel
#SysCleanRootfs
#SysBuildRootfs
#SysSetApplicationVer [version]
#SysBuildApplication
#SysPackageFirmware
function SysPackageFirmware
{
	if [ -d $TFTP_PATH ]; then

		if [ ! -d $DST_PATH ]; then
			mkdir $DST_PATH 
		fi

		cd $TFTP_PATH
		cp -rvf * $DST_PATH/
		
		cd $DST_PATH/
		mv u-boot-dtb.imx $ENV_KERNAL_UBOOT
	fi

	if [ -d $NFS_PATH ]; then
		cd $NFS_PATH
		rm -rf rootfs.tar.bz2 
		tar -vcjf rootfs.tar.bz2 *
		mv rootfs.tar.bz2 $DST_PATH/
	fi

	echo "PackFirmware Success, you can find firmware in directory:"
	echo "$DST_PATH/"
}
alias SysPackageFirmware='SysPackageFirmware'

#显示帮助信息
function SysHelpCommand
{
	echo "${blueText}SysBuildApplication${defText}"
	echo "    ${limityellowText}Build Application, Package Firmware."
	echo "${blueText}SysBuildKernel${defText}"
	echo "    ${limityellowText}Build the Kernal, if exist kernal directory."
	echo "${blueText}SysSetPlatformEmbedLinux${defText}"
	echo "    ${limityellowText}Set Current Platform to Embed-Linux Complier."
	echo "${blueText}SysSetPlatformLinux${defText}"
	echo "    ${limityellowText}Set Current Platform to Linux Complier."
	echo "${blueText}SysSetRemoteIpAddress${defText}"
	echo "    ${limityellowText}example:${cyanText}SysSetRemoteIpAddress 192.168.0.1."
	echo "    ${limityellowText}Set the remote ipaddress for command <SysPushApplication>"
	echo "${blueText}SysSetApplicationVer${defText}"
	echo "    ${limityellowText}example:${cyanText}SysSetRemoteIpAddress 1.0.0.1."
	echo "    ${limityellowText}Set the verison of the firmware when build"
	echo "${blueText}SysBuildApplication${defText}"
	echo "    ${limityellowText}Build the application, copy to nfs directory, also can push to embed-linux device."
	echo "${blueText}SysPushApplication${defText}"
	echo "    ${limityellowText}Push firmware to remote embed-linux device."
	echo "${blueText}SysCleanApplication${defText}"
	echo "    ${limityellowText}Clean the app firmware for next."
	echo "${blueText}SysBuildKernel${defText}"
	echo "    ${limityellowText}Build the linux kernal, copy to tftp directory, if failed, execute SysCleanKernel first."
	echo "${blueText}SysCleanKernel${defText}"
	echo "    ${limityellowText}Clean the kernal compiler data for next."
	echo "${blueText}SysBuildUboot${defText}"
	echo "    ${limityellowText}Build the uboot, copy to tftp directory, if failed, execute SysCleanUboot first."
	echo "${blueText}SysCleanUboot${defText}"
	echo "    ${limityellowText}Clean the uboot compiler data for next."
	echo "${blueText}SysBuildRootfs${defText}"
	echo "    ${limityellowText}build the rootfs, copy to nfs directory, if failed, execut SysCleanRootfs first."
	echo "${blueText}SysCleanRootfs${defText}"
	echo "    ${limityellowText}Clean the rootfs compiler data for next."
	echo "${blueText}SysPackageFirmware${defText}"
	echo "    ${limityellowText}Package the uboot, kernal, rootfs and application, can use tools download."
	echo "${blueText}SysHelpCommand${defText}"
	echo "    ${limityellowText}Show the help command.${defText}"
}
alias SysHelpCommand='SysHelpCommand'

echo "Update the Alias Command Success!"